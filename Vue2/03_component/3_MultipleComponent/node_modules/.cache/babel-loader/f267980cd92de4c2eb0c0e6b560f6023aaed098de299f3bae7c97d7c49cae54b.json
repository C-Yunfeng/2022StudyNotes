{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ba5bd90\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  className: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_School = _resolveComponent(\"School\");\n  const _component_Student = _resolveComponent(\"Student\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", null, _toDisplayString($data.msg) + \"，学生姓名是:\" + _toDisplayString($data.studentName), 1 /* TEXT */), _createCommentVNode(\" 通过父组件给子组件传递函数类型的props实现：子给父传递数据 \"), _createVNode(_component_School, {\n    getSchoolName: $options.getSchoolName\n  }, null, 8 /* PROPS */, [\"getSchoolName\"]), _createCommentVNode(\" 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） \"), _createCommentVNode(\" <Student @atguigu=\\\"getStudentName\\\" @demo=\\\"m1\\\"/> \"), _createCommentVNode(\" 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） \"), _createVNode(_component_Student, {\n    ref: \"student\",\n    onClick: $options.show\n  }, null, 8 /* PROPS */, [\"onClick\"])]);\n}","map":{"version":3,"mappings":";;;EACOA,SAAS,EAAC;AAAK;;;;uBAApBC,oBAWM,OAXNC,UAWM,GAVJC,oBAA0C,6BAAnCC,SAAG,IAAG,SAAO,oBAAGA,iBAAW,kBAElCC,wDAAwC,EACxCC,aAAwCC;IAA/BC,aAAa,EAAEC;EAAa,4CAErCJ,qEAAqD,EACrDA,4EAAwD,EAExDA,kEAAkD,EAClDC,aAA6CI;IAApCC,GAAG,EAAC,SAAS;IAAEC,OAAK,EAASH","names":["className","_createElementBlock","_hoisted_1","_createElementVNode","$data","_createCommentVNode","_createVNode","_component_School","getSchoolName","$options","_component_Student","ref","onClick"],"sourceRoot":"","sources":["/Users/chenyunfeng/Github_Pj/2022StudyNotes/Vue2/03_component/3_MultipleComponent/src/App.vue"],"sourcesContent":["<template>\n  <div className=\"app\">\n    <h1>{{ msg }}，学生姓名是:{{ studentName }}</h1>\n\n    <!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 -->\n    <School :getSchoolName=\"getSchoolName\"/>\n\n    <!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） -->\n    <!-- <Student @atguigu=\"getStudentName\" @demo=\"m1\"/> -->\n\n    <!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） -->\n    <Student ref=\"student\" @click.native=\"show\"/>\n  </div>\n</template>\n\n<script>\nimport Student from './components/Student'\nimport School from './components/School'\n\nexport default {\n  name: 'App',\n  components: {School, Student},\n  data() {\n    return {\n      msg: '你好啊！',\n      studentName: ''\n    }\n  },\n  methods: {\n    getSchoolName(name) {\n      console.log('App收到了学校名：', name)\n    },\n    getStudentName(name, ...params) {\n      console.log('App收到了学生名：', name, params)\n      this.studentName = name\n    },\n    m1() {\n      console.log('demo事件被触发了！')\n    },\n    show() {\n      alert(123)\n    }\n  },\n  mounted() {\n    this.$refs.student.$on('atguigu', this.getStudentName) //绑定自定义事件\n    // this.$refs.student.$once('atguigu',this.getStudentName) //绑定自定义事件（一次性）\n  },\n}\n</script>\n\n<style scoped>\n.app {\n  background-color: gray;\n  padding: 5px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}